require 'net/http'
require 'json'
require 'uri'

class Dict_Main

    # A common function to take API paramters and return Parsed JSON object
    def make_uri(uri)
        apihost = 'https://fourtytwowords.herokuapp.com'
        params = { :api_key => 'fb8007781a73a8884e3821dc8f330cf2949b422d2a4be2bac9f1d5def50213d48f04cf2869255230d8e5adc4bee08ed27035a7a65745b5184b37848e93a691c099b93b1b072f24ad7908352ed10947e3' }
        uri = URI(apihost) + uri
        uri.query = URI.encode_www_form(params)
        response = Net::HTTP.get_response(uri)
        if response.is_a?(Net::HTTPSuccess)
            obj = JSON.parse(response.body)
        end
        return obj
    end

    # A function that take a word as parameter and returns its definition
    def word_definitions(word)
        uri = "/word/#{word}/definitions"
        obj = make_uri(uri)
        return obj
    end

    # A function that take a word as parameter and returns its examples
    def word_examples(word)
        uri = "/word/#{word}/examples"
        obj = make_uri(uri)
        return obj
    end

    # A function that take a word as parameter and returns its related words
    def related_words(word)
        uri = "/word/#{word}/relatedWords"
        obj = make_uri(uri)
        return obj
    end

    # A function that returns any random word from the list of words
    def get_random
        uri = "/words/randomWord"
        obj = make_uri(uri)
        return obj
    end

    # A function that combines and prints all the info about a word
    def word_full_dict(word)
        puts "Word Definations:"
        puts word_definitions(word)['text']
        puts "Related Words:"
        puts related_words(word)
        puts "Word Examples:"
        puts word_examples(word)       
    end

    def word_of_the_day
        word = get_random['word']
        puts "Word of the Day: #{word}"
        word_full_dict(word)
    end
end
# End of Dict_Main class


class Game < Dict_Main

    def initialize
        @word = ""
        @lives = 3
        @score = 0
        @@state = "NEW GAME ---(LOADING)---"      
    end

    def random_word
        @word = get_random['word']
        puts word_definitions(@word)[0]['text']
    end


    def get_definition(word)       
        sentences = word_definitions(@word)
        print "Meaning of the Word: "
        puts sentences[1]['text']        
    end

    def get_examples(word)
        examples = word_examples(@word)
        puts examples['examples'][0]["text"]
    end

    def get_related(word)
        related = related_words(@word)
        puts related[0]['words'][0]
    end

    def jumbled(str)
        s = str.split(//).sort_by { rand }.join('')
        s =~ /[A-Z]/ && s =~ /[a-z]/ ? s.capitalize : s
        puts s
    end

    def display
        40.times do
           print "* "
        end
        puts ""
        puts "Thank You For Playing"
        if @score < 0
            @score = 0
        end
        puts "Your Final Score is : #{@score}"
    end

    def make_guess 
        if @lives > 0
            word_length = @word.size
            puts "Guess the word (#{word_length})"
            guess = gets.chomp

            good_guess = @word.eql?(guess)

            if good_guess 
                puts"Correct Answer !"
                @score += 10
                puts "Score  : #{@score}"
                begin_new
            else 
                @lives -= 1
                puts "You have #{@lives} lives left. Try again!"
                if @score < 0
                    @score = 0
                end
                puts "Score  : #{@score}"
                puts "Enter: 1 to Try Again | Enter: 2 for Hint | Enter: 3 to skip | Enter: 4 to Exit"
                choice = gets.chomp
                case choice
                when "1"
                    @score -= 2
                    if @score<0
                        @score = 0
                    end
                    puts "Score  : #{@score}"
                    make_guess
                when "2"
                    puts "Select the Hint you want to use: | 1. Other Definations | 2. Examples | 3.Related Word | 4.Jumbled Word\n"
                    @score -= 3
                    if @score < 0
                        @score = 0
                    end
                    puts "Score  : #{@score}"
                    hint = gets.chomp
                    case hint
                    when "1"
                        get_definition(@word)
                        make_guess
                    when "2"
                        get_examples(@word)
                        make_guess
                    when "3"
                        get_related(@word)
                        make_guess
                    when "4"
                        jumbled(@word)
                        make_guess
                    end
                when "3"
                    @score -= 4
                    if @score < 0
                        @score = 0
                    end
                    puts "Score  : #{@score}"
                    begin_new
                when "4"
                    display
                end
            end
        end
    end
    
    def begin_new
        40.times do
            print "* "
        end
        puts ""
        puts @@state
        if(@@state == "NEW GAME ---(LOADING)---")
            @@state = "NEXT QUESTION"
        end
        random_word       
        puts "Score  : #{@score}"
        make_guess
    end
end
# End of Game class

a = Dict_Main.new
b = Game.new

puts "Enter 'S' to start"
input= gets.chomp
case input
when 's', 'S'
    puts "Enter: 1. Word Game"
    choice = gets.chomp.to_i
    case choice
    when 1
        b.begin_new
    #when 2
    #    a.word_of_the_day
    end
else 
    puts "Invalid Input"
end
